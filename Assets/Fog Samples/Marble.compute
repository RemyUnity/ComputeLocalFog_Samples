#pragma kernel VoxelizeComputeLocalFog
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/VolumetricLighting/CustomDensityVolumeBase.hlsl"

// Use this function to output the volumetric fog informations.
// The output is a float4, RGB beeing the color, and A is the extinction.
// The input parameters of the function are:
//  voxelCenterWS: The world space coordinate of the voxel.
//  voxelCenterCS: The "center space" coordine of the voxel. This is relative to the dimention of the local volumetric fog component.
//      (0,0,0) is the object's pivot point, and ranges from (-1,-1,-1) to (1,1,1).
//
// ----- Temporary -----
// You can use the _VolumeTime like _Time shader variable. _Time by itself exists but doesn't seem to update, I will try to find a way to use it for more coherency.

float marble_a, marble_b, marble_c;

float2 csqr(float2 a)
{
    return float2(a.x * a.x - a.y * a.y, 2. * a.x * a.y);
}

float map(in float3 p) {

    float res = 0.;

    float3 c = p;
    for (int i = 0; i < 10; ++i) {
        p = marble_a * abs(p) / dot(p, p) - marble_b;
        p.yz = csqr(p.yz);
        p = p.zxy;
        res += exp(marble_c * abs(dot(p, c)));

    }
    return res / 2.;
}

float4 VolumetricFogFunction(float3 voxelCenterWS, float3 voxelCenterCS)
{
    float d = length(voxelCenterCS);

    // Inspired from https://www.shadertoy.com/view/MtX3Ws

    float c = map( voxelCenterCS );
    float d1 = saturate(1 - d);

    float c2 = c;
    c2 = 2.4 - c2;
    c2 = pow(c2, 5);
    c2 = saturate(c2);

    float3 col = lerp(float3(d1*d1,1,d), float3(1,1,1), c2);
    
    c = smoothstep(1, 1.5, c);

    col = lerp(col, float3(0.7, 0.7, 1), 1-c);

    c = smoothstep(0.7, 1, c);

    // Fog color/extinction output
    return float4( col , smoothstep(1.0, 0.8, d) * max(c, 0.05) );
}

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/VolumetricLighting/CustomDensityVolumeBlend.hlsl"
